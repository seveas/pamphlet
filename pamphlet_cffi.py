from cffi import FFI
ffi = FFI()

ffi.set_source("_pamphlet", """
    #include <security/pam_appl.h>
    #include <security/pam_modules.h>
    #include <stdlib.h>
    #include <string.h>
    """,
    libraries=['pam'])

ffi.cdef("""

        /* Pam datatypes */

        typedef struct pam_handle pam_handle_t;
	struct pam_message {
	    int msg_style;
	    const char *msg;
	};
	struct pam_response {
	    char *resp;
	    int resp_retcode;
	};
        struct pam_conv {
            int (*conv)(int num_msg, const struct pam_message **msg,
                        struct pam_response **resp, void *appdata_ptr);
            void *appdata_ptr;
        };

        /* Pam functions */

        int pam_acct_mgmt(pam_handle_t *pamh, int flags);
        int pam_authenticate(pam_handle_t *pamh, int flags);
        int pam_chauthtok(pam_handle_t *pamh, int flags);
        int pam_close_session(pam_handle_t *pamh, int flags);
        int pam_end(pam_handle_t *pamh, int pam_status);
        const char *pam_getenv(pam_handle_t *pamh, const char *name);
        char **pam_getenvlist(pam_handle_t *pamh);
        int pam_get_item(const pam_handle_t *pamh, int item_type, const void **item);
        int pam_get_user(pam_handle_t *pamh, const char **user, const char *prompt);
        int pam_open_session(pam_handle_t *pamh, int flags);
        int pam_putenv(pam_handle_t *pamh, const char *name_value);
        int pam_setcred(pam_handle_t *pamh, int flags);
        int pam_set_item(pam_handle_t *pamh, int item_type, const void *item);
        int pam_start(const char *service_name, const char *user,
                      const struct pam_conv *pam_conversation,
                      pam_handle_t **pamh);
        const char *pam_strerror(pam_handle_t *pamh, int errnum);

        /* Functions to make the conversations work */

        void *malloc(size_t size);
        char *strdup(const char *s);

        extern "Python" int conversation(int num_msg, 
            const struct pam_message **msg,
            struct pam_response **resp, void *appdata_ptr);

        /* We need to free some data returned from pam functions */

        void free(void *ptr);

	/* Return codes */

        #define PAM_ABORT ...
        #define PAM_ACCT_EXPIRED ...
        #define PAM_AUTHINFO_UNAVAIL ...
        #define PAM_AUTHTOK_DISABLE_AGING ...
        #define PAM_AUTHTOK_ERR ...
        #define PAM_AUTHTOK_EXPIRED ...
        #define PAM_AUTHTOK_LOCK_BUSY ...
        #define PAM_AUTHTOK_RECOVERY_ERR ...
        #define PAM_AUTH_ERR ...
        #define PAM_BAD_ITEM ...
        #define PAM_BUF_ERR ...
        #define PAM_CONV_ERR ...
        #define PAM_CRED_ERR ...
        #define PAM_CRED_EXPIRED ...
        #define PAM_CRED_INSUFFICIENT ...
        #define PAM_CRED_UNAVAIL ...
        #define PAM_IGNORE ...
        #define PAM_MAXTRIES ...
        #define PAM_NEW_AUTHTOK_REQD ...
        #define PAM_PERM_DENIED ...
        #define PAM_SERVICE_ERR ...
        #define PAM_SESSION_ERR ...
        #define PAM_SUCCESS ...
        #define PAM_SYMBOL_ERR ...
        #define PAM_SYSTEM_ERR ...
        #define PAM_TRY_AGAIN ...
        #define PAM_USER_UNKNOWN ...

        /* Arguments for pam_start/pam_acct_mgmt */

        #define PAM_DISALLOW_NULL_AUTHTOK ...
        #define PAM_SILENT ...

        /* Pam message styles */

        #define PAM_PROMPT_ECHO_OFF ...
        #define PAM_PROMPT_ECHO_ON ...
        #define PAM_ERROR_MSG ...
        #define PAM_TEXT_INFO ...

        /* Arguments for pam_setcred */

        #define PAM_DELETE_CRED ...
        #define PAM_ESTABLISH_CRED ...
        #define PAM_REFRESH_CRED ...
        #define PAM_REINITIALIZE_CRED ...

        /* Supported items for set_item/set_item */

        #define PAM_AUTHTOK_TYPE ...
        #define PAM_RHOST ...
        #define PAM_RUSER ...
        #define PAM_SERVICE ...
        #define PAM_TTY ...
        #define PAM_USER ...
        #define PAM_USER_PROMPT ...
        #define PAM_XDISPLAY ...

""")

if __name__ == '__main__':
    ffi.compile()
